{"version":3,"sources":["redux/card/card.selector.js","redux/card/card.types.js","component/card-item/card-item.component.jsx","redux/card/card.action.js","component/card/card.component.jsx","pages/focus-page/focus-page.component.jsx","App.js","serviceWorker.js","redux/card/card.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["selectCardList","createSelector","state","card","cardList","CardActionTypes","connect","dispatch","cardAction","item","type","payload","className","selected","onClick","name","mapStateToProps","createStructuredSelector","map","cardItem","key","id","FocusPage","style","fontWeight","fontSize","textAlign","App","Boolean","window","location","hostname","match","INITIAL_STATE","combineReducers","action","middleWares","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAIaA,EAAiBC,YAC1B,CAHe,SAAAC,GAAK,OAAIA,EAAMC,QAI9B,SAAAA,GAAI,OAAIA,EAAKC,YCNJC,G,MACI,eCkBFC,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACpCC,WAAY,SAAAC,GAAI,OAAIF,ECde,CACnCG,KAAML,EACNM,QDYwCF,QAG7BH,EAdE,SAAC,GAAD,IAAEG,EAAF,EAAEA,KAAMD,EAAR,EAAQA,WAAR,OACb,yBAAKI,UAAU,UACX,yBAAKA,UAAS,UAAKH,EAAKI,SAAW,UAAW,GAAhC,SAA4CC,QAAU,kBAAMN,EAAWC,KACjF,yBAAKG,UAAU,aACX,4BAAI,2BAAIH,EAAKM,aEOvBC,EAAkBC,YAAyB,CAC7Cb,SAAUJ,IAECM,cAAQU,EAAgB,KAAxBV,EAXF,SAAC,GAAD,IAAEF,EAAF,EAAEA,SAAF,OACV,yBAAKQ,UAAU,OAENR,EAASc,KAAI,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CAAUC,IAAMD,EAASE,GAAIZ,KAAQU,WCqB3DG,EA5BG,kBACd,oCACE,yBAAKV,UAAU,cACb,wBAAIW,MAAO,CAACC,WAAW,MAAMC,SAAS,SAAtC,sCACA,wBAAIF,MAAO,CAACC,WAAW,SAASC,SAAS,SAAzC,6DACA,kBAAC,EAAD,OAGF,yBAAKb,UAAU,WACX,yBAAKA,UAAU,cAAf,QAGA,yBAAKA,UAAU,cACb,yBAAKW,MAAO,CAACG,UAAU,WACrB,0BAAMd,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,iBAGpB,yBAAKA,UAAU,cAAf,WCfKe,EANH,kBACR,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCChBAC,EAAgB,CAClB7B,SAAS,CACL,CACIiB,GAAI,EACJN,KAAK,gBACLF,UAAU,GAEd,CACIQ,GAAI,EACJN,KAAK,aACLF,UAAU,GAEd,CACIQ,GAAI,EACJN,KAAK,gBACLF,UAAU,GAEd,CACIQ,GAAI,EACJN,KAAK,WACLF,UAAU,GAEd,CACIQ,GAAI,EACJN,KAAK,oBACLF,UAAU,GAEd,CACIQ,GAAI,EACJN,KAAK,iBACLF,UAAU,GAEd,CACIQ,GAAI,EACJN,KAAK,MACLF,UAAU,KClCPqB,cAAgB,CAC3B/B,KDsCuB,WAAoC,IAAnCD,EAAkC,uDAA1B+B,EAAeE,EAAW,uCAC1D,OAAQA,EAAOzB,MACX,KAAKL,EACD,OAAO,2BACAH,GADP,IAEIE,SAAUF,EAAME,SAASc,KAAI,SAAAC,GAAQ,OACjCA,EAASE,KAAOc,EAAOxB,QAAQU,GAA/B,2BACIF,GADJ,IACcN,UAAUM,EAASN,WAEjCM,OAGZ,QACG,OAAOjB,MEjDZkC,EAAc,CAACC,KAINC,EAFDC,YAAYC,EAAaC,IAAe,WAAf,EAAmBL,ICA1DM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAASA,GACjB,kBAAC,EAAD,QAGJO,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c30fa73d.chunk.js","sourcesContent":["import {createSelector} from 'reselect'\n\nconst selectCard = state => state.card\n\nexport const selectCardList = createSelector(\n    [selectCard],\n    card => card.cardList\n)","export const CardActionTypes = {\n    SELECT_CARD: 'SELECT_CARD'\n}","import React from 'react'\nimport './card-item.styles.css'\nimport {connect} from 'react-redux'\nimport {cardAction} from '../../redux/card/card.action.js'\n\nconst CardItem = ({item, cardAction}) => (\n    <div className=\"column\">\n        <div className={`${item.selected ? 'bgColor': '' } card`} onClick={ () => cardAction(item)}>\n            <div className=\"container\">\n                <h3><b>{item.name}</b></h3>\n            </div>\n        </div>\n    </div>\n)\n\nconst mapDispatchToProps = dispatch => ({\n    cardAction: item => dispatch(cardAction(item))\n})\n\nexport default connect(null,mapDispatchToProps)(CardItem)","import { CardActionTypes } from \"./card.types\";\n\nexport const cardAction = cardItem => ({\n    type: CardActionTypes.SELECT_CARD,\n    payload: cardItem \n})","import React from 'react'\nimport './card.styles.css'\n\nimport {connect} from 'react-redux'\nimport {selectCardList} from '../../redux/card/card.selector'\nimport {createStructuredSelector} from 'reselect'\nimport CardItem from '../card-item/card-item.component'\n\nconst Card = ({cardList}) => (\n   <div className='row'>\n        {\n            cardList.map(cardItem => <CardItem key ={cardItem.id} item = {cardItem} /> )\n        }\n   </div>\n)\n\nconst mapStateToProps = createStructuredSelector({\n    cardList: selectCardList\n})\nexport default connect(mapStateToProps,null)(Card)","import React from 'react'\nimport './focus-page.styles.css'\nimport Card from '../../component/card/card.component'\n\nconst FocusPage = () => (\n    <>\n      <div className='focus-page'>\n        <h1 style={{fontWeight:'500',fontSize:'28px'}}>What are your main areas of focus?</h1>\n        <h2 style={{fontWeight:'normal',fontSize:'19px'}}>This will help us build a personalized experience for you</h2>\n        <Card />\n      </div>\n\n      <div className='row-dot'>\n          <div className='column-dot'>\n            BACK\n          </div>\n          <div className='column-dot'>\n            <div style={{textAlign:'center'}}>\n              <span className=\"dot\"></span>\n              <span className=\"dot\"></span>\n              <span className=\"dot\"></span>\n              <span className=\"dot\"></span>\n              <span className=\"dot active\"></span>\n            </div>\n          </div>\n          <div className='column-dot'>\n            DONE\n          </div>\n      </div>\n    </>\n)\n\nexport default FocusPage\n\n","import React from 'react';\nimport './App.css';\nimport FocusPage from './pages/focus-page/focus-page.component';\n\nconst App = () => (\n    <div>\n      <FocusPage />\n    </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CardActionTypes } from \"./card.types\"\n\nconst INITIAL_STATE = {\n    cardList:[\n        {\n            id: 1,\n            name:'Blood Glucose',\n            selected: true\n        },\n        {\n            id: 2,\n            name:'Medication',\n            selected: false\n        },\n        {\n            id: 3,\n            name:'Food Tracking',\n            selected: false\n        },\n        {\n            id: 4,\n            name:'Exercise',\n            selected: false\n        },\n        {\n            id: 5,\n            name:'Weight Management',\n            selected: false\n        },\n        {\n            id: 6,\n            name:'Blood Pressure',\n            selected: false\n        },\n        {\n            id: 7,\n            name:'A1C',\n            selected: false\n        }\n    ]\n}\n\nexport const cardReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case CardActionTypes.SELECT_CARD:\n            return {\n                ...state,\n                cardList: state.cardList.map(cardItem => \n                    cardItem.id === action.payload.id ?\n                    {...cardItem, selected:!cardItem.selected}\n                    : \n                    cardItem\n                    )\n            }\n        default:\n           return state\n    }\n}","import {combineReducers} from 'redux'\nimport { cardReducer } from './card/card.reducer'\n\nexport default combineReducers({\n    card: cardReducer\n})","import {createStore, applyMiddleware} from 'redux'\n\nimport logger from 'redux-logger'\n\nimport rootReducer from './root-reducer'\n\nconst middleWares = [logger]\n\nconst store = createStore(rootReducer, applyMiddleware(...middleWares))\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}