{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleClick","setState","backgroundColor","state","className","style","fontWeight","fontSize","this","onClick","textAlign","onclick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOA+GeA,G,wDA3Gb,aAAc,IAAD,8BACX,gBAMFC,YAAe,WACb,EAAKC,SAAS,CACZC,iBAAkB,EAAKC,MAAMD,mBAP/B,EAAKC,MAAQ,CACXD,iBAAgB,GAHP,E,qDAaX,OACA,6BACE,yBAAKE,UAAU,cACb,wBAAIC,MAAO,CAACC,WAAW,MAAMC,SAAS,SAAtC,sCACA,wBAAIF,MAAO,CAACC,WAAW,SAASC,SAAS,SAAzC,6DACE,yBAAKH,UAAU,OAEb,yBAAKA,UAAU,UACZ,yBAAKA,UAAS,UAAKI,KAAKL,MAAMD,gBAAkB,GAAG,UAArC,SAAuDO,QAASD,KAAKR,aAChF,yBAAKI,UAAU,aACb,4BAAI,gDAKZ,yBAAKA,UAAU,UACb,yBAAKA,UAAS,UAAKI,KAAKL,MAAMD,gBAAkB,UAAU,GAA5C,SAAuDO,QAASD,KAAKR,aACjF,yBAAKI,UAAU,aACb,4BAAI,6CAKV,yBAAKA,UAAU,UACb,yBAAKA,UAAS,UAAKI,KAAKL,MAAMD,gBAAkB,UAAU,GAA5C,SAAuDO,QAASD,KAAKR,aACjF,yBAAKI,UAAU,aACb,4BAAI,gDAKV,yBAAKA,UAAU,UACb,yBAAKA,UAAS,UAAKI,KAAKL,MAAMD,gBAAkB,UAAU,GAA5C,SAAuDO,QAASD,KAAKR,aACjF,yBAAKI,UAAU,aACb,4BAAI,2CAKV,yBAAKA,UAAU,UACb,yBAAKA,UAAS,UAAKI,KAAKL,MAAMD,gBAAkB,UAAU,GAA5C,SAAuDO,QAASD,KAAKR,aACjF,yBAAKI,UAAU,aACb,4BAAI,oDAKV,yBAAKA,UAAU,UACb,yBAAKA,UAAS,UAAKI,KAAKL,MAAMD,gBAAkB,UAAU,GAA5C,SAAuDO,QAASD,KAAKR,aACjF,yBAAKI,UAAU,aACb,4BAAI,iDAKV,yBAAKA,UAAU,UACb,yBAAKA,UAAS,UAAKI,KAAKL,MAAMD,gBAAkB,UAAU,GAA5C,SAAuDO,QAASD,KAAKR,aACjF,yBAAKI,UAAU,aACb,4BAAI,wCAYhB,yBAAKA,UAAU,WACX,yBAAKA,UAAU,cAAf,QAGA,yBAAKA,UAAU,cACb,yBAAKC,MAAO,CAACK,UAAU,WACrB,0BAAMN,UAAU,MAAMO,QAAQ,oBAC9B,0BAAMP,UAAU,MAAMO,QAAQ,oBAC9B,0BAAMP,UAAU,MAAMO,QAAQ,oBAC9B,0BAAMP,UAAU,MAAMO,QAAQ,oBAC9B,0BAAMP,UAAU,aAAaO,QAAQ,sBAGzC,yBAAKP,UAAU,cAAf,c,GAjGQQ,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c95292a8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      backgroundColor:false\n    }\n  }\n\n  handleClick =  () => {\n    this.setState({\n      backgroundColor: !this.state.backgroundColor\n    })\n  } \n  render(){\n    return (\n    <div>\n      <div className='focus-page'>\n        <h1 style={{fontWeight:'500',fontSize:'28px'}}>What are your main areas of focus?</h1>\n        <h2 style={{fontWeight:'normal',fontSize:'19px'}}>This will help us build a personalized experience for you</h2>\n          <div className=\"row\">\n  \n            <div className=\"column\">\n               <div className={`${this.state.backgroundColor ? '':'bgColor'} card`} onClick={this.handleClick}>\n                  <div className=\"container\">\n                    <h3><b>Blood Glucose</b></h3>\n                  </div>\n                </div>\n              </div>\n  \n            <div className=\"column\">\n              <div className={`${this.state.backgroundColor ? 'bgColor':''} card`} onClick={this.handleClick}>\n                <div className=\"container\">\n                  <h3><b>Medication</b></h3>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"column\">\n              <div className={`${this.state.backgroundColor ? 'bgColor':''} card`} onClick={this.handleClick}>\n                <div className=\"container\">\n                  <h3><b>Food Tracking</b></h3>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"column\">\n              <div className={`${this.state.backgroundColor ? 'bgColor':''} card`} onClick={this.handleClick}>\n                <div className=\"container\">\n                  <h3><b>Exercise</b></h3>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"column\">\n              <div className={`${this.state.backgroundColor ? 'bgColor':''} card`} onClick={this.handleClick}>\n                <div className=\"container\">\n                  <h3><b>Weight Management</b></h3>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"column\">\n              <div className={`${this.state.backgroundColor ? 'bgColor':''} card`} onClick={this.handleClick}>\n                <div className=\"container\">\n                  <h3><b>Blood Pressure</b></h3>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"column\">\n              <div className={`${this.state.backgroundColor ? 'bgColor':''} card`} onClick={this.handleClick}>\n                <div className=\"container\">\n                  <h3><b>A1C</b></h3>\n                </div>\n              </div>\n            </div>\n\n          </div>\n\n          \n      \n\n      </div>\n\n      <div className='row-dot'>\n          <div className='column-dot'>\n            BACK\n          </div>\n          <div className='column-dot'>\n            <div style={{textAlign:'center'}}>\n              <span className=\"dot\" onclick=\"currentSlide(1)\"></span>\n              <span className=\"dot\" onclick=\"currentSlide(2)\"></span>\n              <span className=\"dot\" onclick=\"currentSlide(3)\"></span>\n              <span className=\"dot\" onclick=\"currentSlide(3)\"></span>\n              <span className=\"dot active\" onclick=\"currentSlide(3)\"></span>\n            </div>\n          </div>\n          <div className='column-dot'>\n          DONE\n          </div>\n        </div>\n      \n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}